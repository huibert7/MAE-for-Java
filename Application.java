import java.awt.*;import java.awt.image.*;import java.applet.*;import java.util.*;public class Application extends Thread{	int						Counter=1;	MAE						theApplet;	Desktop					theDesktop;	NewMenuBar				theMenuBar;	AppleFoundationClasses	AFC;	boolean					RunLoop = true;		public void Setup(MAE app)	{		NewMenu	 Menu1,Menu2,Menu3,Menu4,Menu5,Menu6;			theDesktop = app.theDesktop;		theMenuBar = app.theMenuBar;		theApplet = app;		AFC = new AppleFoundationClasses(this);		Menu1 = new NewMenu(1,"@",false,theDesktop);		Menu1.AddMItem("About MAE for Java...",false);		theMenuBar.AddMenu(Menu1);		Menu2 = new NewMenu(2,"File",false,theDesktop);		Menu2.AddMItem("New Window",false,'N');		theMenuBar.AddMenu(Menu2);		Menu3 = new NewMenu(3,"Windows",false,theDesktop);		Menu3.AddMItem("Select",false);		Menu3.AddMItem("Position",false);		Menu3.AddMItem("Visibility",false);		theMenuBar.AddMenu(Menu3);				Menu4 = new NewMenu(100,"",false,theDesktop);		Menu3.AttachMenu(Menu4,0);				Menu5 = new NewMenu(101,"",false,theDesktop);		Menu5.AddMItem("Send Behind",false);		Menu5.AddMItem("Send Back",false);		Menu3.AttachMenu(Menu5,1);		Menu6 = new NewMenu(102,"",false,theDesktop);		Menu6.AddMItem("Hide Frontmost",false);		Menu6.AddMItem("Show All",false);		Menu3.AttachMenu(Menu6,2);				CreateWindow(1);		CreateWindow(1);		CreateWindow(2);		AFC.FrontWindow().NewControl(new NewCheckBox(),new Rectangle(10,10,0,0),"Check this",true,0,0,0,1);		AFC.FrontWindow().NewControl(new NewRadioButton(),new Rectangle(10,30,0,0),"Option 1",true,1,0,0,2);		AFC.FrontWindow().NewControl(new NewRadioButton(),new Rectangle(10,45,0,0),"Option 2",true,0,0,0,3);		AFC.FrontWindow().NewControl(new NewRadioButton(),new Rectangle(10,60,0,0),"Option 3",true,0,0,0,4);//		AFC.NewWindow(150,50,350,150,"Hello",true,new ModalWindow(),null,false,0);//		AFC.NewWindow(150,100,350,200,"Hello",true,new MovableModalWindow(),null,false,0);	}		public void run()	{		NewEvent			theEvent;		FindWindowResult	theResult;		int					i,theMenuResult,theMenu,theItem;		long				theGrowWindowResult;		String				text;		Enumeration			e;		NewWindow			Temp = null;		NewMItem			Temp2;		while (RunLoop)		{			theEvent = AFC.GetNextEvent((short)0xFF);			if (theEvent != null)			{				switch (theEvent.what)				{					case (1): // mouseDown					{						theResult = AFC.FindWindow(theEvent.x,theEvent.y);						switch (theResult.part)						{							case (0): // inDesk							{								Temp = AFC.FrontWindow();								if (Temp != null)								{									if (Temp.modal) AFC.SysBeep();								}								break;							}							case (1): // inMenuBar							{								Temp = AFC.FrontWindow();								if (Temp != null) if (Temp.modal) AFC.SysBeep();								else								{									theMenuResult = theMenuBar.MenuSelect(theEvent.x,theEvent.y);									theMenu = theMenuResult / 65536;									theItem = theMenuResult & 65535;									switch (theMenu)									{										case (1): // Apple Menu										{											AFC.SysBeep();											AFC.Alert("Written by Huibert Aalbers, huibert@informix.com", 0, 250);											break;										}										case (2): // Edit Menu										{											AFC.watchCursor();											CreateWindow(1);											AFC.InitCursor();											break;										}										case (100):	// Select Window Menu										{											i = 0;											e = theMenuBar.GetMenu(2).GetMItem(0).AttachedMenu.myVector.elements();											while (e.hasMoreElements())											{												Temp2 = (NewMItem)e.nextElement();												if (i==theItem) Temp2.CheckItem(true);												else Temp2.CheckItem(false);												i++;											}											Temp2 = (NewMItem)theMenuBar.GetMenu(2).GetMItem(0).AttachedMenu.myVector.elementAt(theItem);											text = Temp2.Title.text;											e = AFC.theWindows.elements();											while (e.hasMoreElements())											{												Temp = (NewWindow)e.nextElement();												if (text.equals(Temp.title)) break;											}											Temp.SelectWindow();											break;										}										case (101):										{											switch (theItem)											{												case (0): // Send Behind												{													i = 0;													e = AFC.theWindows.elements();													while (e.hasMoreElements())													{														Temp = (NewWindow)e.nextElement();														if (Temp == AFC.FrontWindow()) break;														i++;													}													while (i>0)													{														i--;														Temp = (NewWindow)AFC.theWindows.elementAt(i);														if (Temp.visible) break;													}													if (i != 0) AFC.FrontWindow().SendBehind(Temp);													else AFC.FrontWindow().SendBehind(null);													break;												}												case (1): // Send Back												{													AFC.FrontWindow().SendBehind(null);													break;												}											}											break;										}										case (102):										{											switch (theItem)											{												case (0):												{													AFC.FrontWindow().HideWindow();													break;												}												case (1):												{													e = AFC.theWindows.elements();													while (e.hasMoreElements())													{														Temp = (NewWindow)e.nextElement();														if (!Temp.visible) Temp.ShowWindow();													}													break;												}											}											break;										}									}								}								theMenuBar.HiliteMenu(0);								break;							}							case (3): // inContent							{								if (AFC.FrontWindow() != theResult.theWindow)								{									if (!AFC.FrontWindow().modal)										theResult.theWindow.SelectWindow();									else										AFC.SysBeep();								}								else								{	Point	location = theResult.theWindow.GlobalToLocal(new Point(theEvent.x,theEvent.y));									FindControlResult result2 = theResult.theWindow.FindControl(location);									if (result2.part != 0)									{										i = result2.theControl.TrackControl(location);										if (i == 11)										{											if (result2.theControl.value == 0) result2.theControl.SetControlValue(1);											else result2.theControl.SetControlValue(0);										}									}								}								break;							}							case (4): // inDrag							{								theResult.theWindow.DragWindow(new Point(theEvent.x,theEvent.y));								break;							}							case (5): // inGrow							{								theGrowWindowResult = theResult.theWindow.GrowWindow(new Point(theEvent.x,theEvent.y),new Rectangle(60,60,500,500));								theResult.theWindow.SizeWindow((int)theGrowWindowResult/65536,(int)theGrowWindowResult&65535);								break;							}							case (6): // inGoAway							{								if (AFC.TrackGoAway(theResult.theWindow,theEvent.x,theEvent.y,theResult.part)) theResult.theWindow.CloseWindow();								break;							}							case (7):							{								if (AFC.TrackBox(theResult.theWindow,theEvent.x,theEvent.y,theResult.part))									theResult.theWindow.ZoomWindow(theResult.part,false);								break;							}							case (8):							{								if (AFC.TrackBox(theResult.theWindow,theEvent.x,theEvent.y,theResult.part))									theResult.theWindow.ZoomWindow(theResult.part,false);								break;							}						}						break;					}					case (2): // mouseUp					{						break;					}					case (3): // keyDown					{						break;					}					case (4): // keyUp					{						break;					}					case (5):					{						System.out.println("auto key");						break;					}				}			}		}				while (AFC.theWindows.size() > 0)		{			AFC.FrontWindow().CloseWindow();		}		RunLoop = true;	}	public void CreateWindow(int type)	{		String	title="Window";		int		xPos,yPos;				xPos = 50 + 10*(Counter-1);		yPos = 50 + 10*(Counter-1);				switch (type)		{			case(1):			{				AFC.NewWindow(xPos,yPos,xPos+200,yPos+100,title+" "+Counter,true,new myDocumentWindow(),null,true,Counter);				break;			}			case(2):			{				AFC.NewWindow(xPos,yPos,xPos+200,yPos+100,title+" "+Counter,true,new myNoGrowDocWindow(),null,true,Counter);				break;			}		}				Counter++;	}}