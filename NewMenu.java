import java.awt.*;import java.awt.image.*;import java.applet.*;import java.util.*;public class NewMenu extends Object{	public  Vector	    myVector = new Vector();	public  MenuString	MenuName;	public	int			MenuID;	public  boolean     Disabled;	public  boolean     highlighted;	public	boolean		passedOver;	public  int		    Position;	public  int	        MenuTitleWidth;	public  int			MenuHeight;	public  int			MenuWidth,MenuWidth1,MenuWidth2;	private	Image		Background,MenuImage;	private Graphics	BackgroundGC,MenuImageGC;	public  int			xBackPos,yBackPos;	private	Image		offscreenMenu;	private Graphics	offscreenMenuGC;		private static	Desktop	theDesktop;		public NewMenu(int ID, String Title, boolean disab, Desktop back)	{				this.MenuName = new MenuString(Title,back);		this.MenuID = ID;		this.Disabled = disab;		this.highlighted = false;		this.MenuTitleWidth = this.MenuName.Width()+13;		this.MenuHeight = 3;		this.MenuWidth = 0;		this.MenuWidth1 = 0;		this.MenuWidth2 = 0;		if (theDesktop == null)		{			theDesktop = back;		}	}		public void Draw(int x, int y)	{		Enumeration		e;		NewMItem		Temp;		int				y2;		Graphics		g;		passedOver = false;		SaveBackground(x,y);		MenuImage = theDesktop.theApplet.createImage(MenuWidth+1,MenuHeight);		MenuImageGC = MenuImage.getGraphics();				MenuImageGC.drawImage(Background,0,0,null);		MenuImageGC.setColor(Color.white);		MenuImageGC.fillRect(0,0,MenuWidth,MenuHeight-2);		MenuImageGC.setColor(Color.black);		MenuImageGC.drawRect(0,0,MenuWidth-1,MenuHeight-3);		MenuImageGC.drawLine(2,MenuHeight-2,MenuWidth,MenuHeight-2); //shadow		MenuImageGC.drawLine(MenuWidth,3,MenuWidth,MenuHeight-2); //shadow						y2 = 13;		e = myVector.elements();		while (e.hasMoreElements())		{			Temp = (NewMItem)e.nextElement();			Temp.Highlighted = false;			Temp.MIDraw(0,y2,MenuWidth,MenuImageGC,Disabled,MenuWidth2);			y2 = y2+18;		}		g = theDesktop.getGraphics();		g.drawImage(MenuImage,x,y,null);		theDesktop.offScreenImageGC.drawImage(MenuImage,x,y,null);	}		private void SaveBackground(int x,int y)	{				NewMenu		Temp;		Enumeration	e;		Background = theDesktop.theApplet.createImage(MenuWidth+1,MenuHeight);		BackgroundGC = Background.getGraphics();		BackgroundGC.drawImage(theDesktop.offScreenImage,-x,-y,null);		xBackPos = x;		yBackPos = y;	}		public void RedrawMenu()	{		Graphics	g;				g = theDesktop.getGraphics();		g.drawImage(MenuImage,xBackPos,yBackPos,null);	}	public void RestoreBackground()	{		if (Background !=null)		{			theDesktop.offScreenImageGC.drawImage(Background,xBackPos,yBackPos,null);			theDesktop.getGraphics().drawImage(Background,xBackPos,yBackPos,null); 	 	 	Background = null;			MenuImage = null;		}	}	public void AddMItem(String Title, boolean disab)	{		NewMItem	theMItem;		int			MenuItemWidth;				theMItem = new NewMItem(Title,disab,theDesktop);		myVector.addElement(theMItem);		MenuHeight+=18;		MenuItemWidth = theMItem.Title.Width() + 28;		if (MenuItemWidth > MenuWidth1)		{			MenuWidth1 = MenuItemWidth;			MenuWidth = MenuWidth1 + MenuWidth2;		}	}	public void AddMItem(String Title, boolean disab, char Key)	{		NewMItem	theMItem;		MenuString	theMenuString;		int			MenuItemWidth;		Character	theCharacter;				theMItem = new NewMItem(Title,disab,Key,theDesktop);		myVector.addElement(theMItem);		MenuHeight+=18;		MenuItemWidth = theMItem.Title.Width() + 28;		if (MenuItemWidth > MenuWidth1)		{			MenuWidth1 = MenuItemWidth;		}		theCharacter = new Character(Key);		theMenuString = new MenuString(theCharacter.toString(),theDesktop);		MenuItemWidth = theMenuString.Width() + 16;		if (MenuItemWidth > MenuWidth2)		{			MenuWidth2 = MenuItemWidth;		}		MenuWidth = MenuWidth1 + MenuWidth2;	}	public void InsertMenuItem(String Title, int order, boolean disab)	{		NewMItem	theMItem;		int			MenuItemWidth;				theMItem = new NewMItem(Title,disab,theDesktop);		myVector.insertElementAt(theMItem,order);		MenuHeight+=18;		MenuItemWidth = theMItem.Title.Width() + 28;		if (MenuItemWidth > MenuWidth1)		{			MenuWidth1 = MenuItemWidth;			MenuWidth = MenuWidth1 + MenuWidth2;		}	}	public void InsertMenuItem(String Title, int order, boolean disab, char Key)	{		NewMItem	theMItem;		MenuString	theMenuString;		int			MenuItemWidth;		Character	theCharacter;				theMItem = new NewMItem(Title,disab,Key,theDesktop);		myVector.insertElementAt(theMItem,order);		MenuHeight+=18;		MenuItemWidth = theMItem.Title.Width() + 28;		if (MenuItemWidth > MenuWidth1)		{			MenuWidth1 = MenuItemWidth;		}		theCharacter = new Character(Key);		theMenuString = new MenuString(theCharacter.toString(),theDesktop);		MenuItemWidth = theMenuString.Width() + 16;		if (MenuItemWidth > MenuWidth2)		{			MenuWidth2 = MenuItemWidth;		}		MenuWidth = MenuWidth1 + MenuWidth2;	}	public NewMItem GetMItem(int Order)	{		return (NewMItem)myVector.elementAt(Order);	}	public void AttachMenu(NewMenu theMenu,int Order)	{		NewMItem	theMenuItem;		Enumeration	e;		Character	theCharacter;		MenuString	theMenuString;		int			MenuItemWidth;				theMenuItem = (NewMItem)myVector.elementAt(Order);		theMenuItem.AttachedMenu = theMenu;		if (theMenuItem.KeybEquiv == '\n')		{			if (MenuWidth2 < 11)			{				MenuWidth2 = 11;				MenuWidth = MenuWidth1 + MenuWidth2;			}		}		else		{			theMenuItem.KeybEquiv = '\n';			e = myVector.elements();			MenuWidth = 0;			while (e.hasMoreElements())			{				theMenuItem = (NewMItem)e.nextElement();				if (theMenuItem.AttachedMenu != null)				{					if (MenuWidth<11) MenuWidth = 11;				}				if (theMenuItem.KeybEquiv != '\n')				{					theCharacter = new Character(theMenuItem.KeybEquiv);					theMenuString = new MenuString(theCharacter.toString(),theDesktop);					MenuItemWidth = theMenuString.Width() + 16;					if (MenuItemWidth > MenuWidth2)					{						MenuWidth2 = MenuItemWidth;					}					MenuWidth = MenuWidth1 + MenuWidth2;				}			}		}	}	public void Disable()	{		Disabled = true;	}	public void Enable()	{		Disabled = false;	}		public void Hilite()	{		Graphics	g;				if (offscreenMenu!=null)		{			if (this.highlighted !=true)			{				g = theDesktop.getGraphics();				if (this.MenuName.text.equals("@"))				{					this.MenuName.DrawAppleInv(7,offscreenMenuGC);				}				else				{					offscreenMenuGC.setColor(Color.white);					offscreenMenuGC.setXORMode(Color.black);					offscreenMenuGC.fillRect(this.Position,2,this.MenuTitleWidth,18);					offscreenMenuGC.setPaintMode();				}				this.highlighted=true;				g.drawImage(offscreenMenu,0,0,null);				theDesktop.offScreenImageGC.drawImage(offscreenMenu,0,0,null);			}		}	}		public void UnHilite()	{		Graphics	g;				if (offscreenMenu!=null)		{			if (this.highlighted ==true)			{				g = theDesktop.getGraphics();				if (this.MenuName.text.equals("@"))				{					this.MenuName.DrawApple(7,offscreenMenuGC);				}				else				{					offscreenMenuGC.setColor(Color.white);					offscreenMenuGC.setXORMode(Color.black);					offscreenMenuGC.fillRect(this.Position,2,this.MenuTitleWidth,18);					offscreenMenuGC.setPaintMode();				}				this.highlighted=false;				g.drawImage(offscreenMenu,0,0,null);				theDesktop.offScreenImageGC.drawImage(offscreenMenu,0,0,null);			}		}	}		public void HiliteMenuItem(int item)	{		MenuImageGC.setColor(Color.white);		MenuImageGC.setXORMode(Color.black);		MenuImageGC.fillRect(1,1+(item*18),MenuWidth-2,17);		MenuImageGC.setPaintMode();				RedrawMenu();				passedOver = true;	}		public void DeleteMenuItem(int item)	{		myVector.removeElementAt(item);		CalcMenuSize();	}		public void CalcMenuSize()	{		Enumeration	e;		MenuString	theMenuString;		int			MenuItemWidth;		Character	theCharacter;		NewMItem	Temp;				MenuWidth1 = 0;		MenuWidth2 = 0;		MenuWidth = 0;		e = myVector.elements();		while (e.hasMoreElements())		{			Temp = (NewMItem)e.nextElement();			MenuItemWidth = Temp.Title.Width() + 28;			if (MenuItemWidth > MenuWidth1)			{				MenuWidth1 = MenuItemWidth;			}			if (Temp.KeybEquiv != '\n')			{				theCharacter = new Character(Temp.KeybEquiv);				theMenuString = new MenuString(theCharacter.toString(),theDesktop);				MenuItemWidth = theMenuString.Width() + 16;				if (MenuItemWidth > MenuWidth2)				{					MenuWidth2 = MenuItemWidth;				}			}			if (Temp.AttachedMenu != null)			{				if (MenuWidth2 < 11) MenuWidth2 = 11;			}			MenuWidth = MenuWidth1 + MenuWidth2;		}		MenuHeight = (myVector.size() * 18) +3;	}		public int CountMItems()	{		return myVector.size();	}		public void setMenuBarInfo(Image MenuImage,Graphics MenuGC)	{		this.offscreenMenu = MenuImage;		this.offscreenMenuGC = MenuGC;	}}