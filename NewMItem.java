import java.awt.*;import java.awt.image.*;import java.applet.*;import java.util.*;public class NewMItem extends Object{	public  MenuString	Title;	public  boolean		Disabled;	public  boolean		Checked;	public  boolean		Highlighted;	public	NewMenu		AttachedMenu;	public	char		KeybEquiv;		private static	Desktop		theDesktop;	private	static	Image    	characters,tempChar;	private static	Graphics	tempCharGC;		private static final byte pixels[] = 	{	0,0,0,0,0,0,0,0,0,0,2,0,2,2,0,0,0,2,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,	0,0,0,0,0,0,0,0,0,2,2,2,0,0,2,0,2,0,0,2,0,0,2,2,0,0,0,0,0,0,0,0,0,	0,0,0,0,0,0,0,0,2,2,0,2,0,0,2,0,2,0,0,2,0,0,2,2,2,0,0,0,0,0,0,0,0,	0,0,0,0,0,0,0,2,2,0,0,0,2,2,2,2,2,2,2,0,0,0,2,2,2,2,0,0,0,0,0,0,0,	0,0,0,0,0,0,2,2,0,0,0,0,0,0,2,0,2,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,	2,2,0,0,0,2,2,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,2,2,2,2,0,0,0,0,0,0,0,	0,2,2,0,2,2,0,0,0,0,0,2,0,0,2,0,2,0,0,2,0,0,2,2,2,0,0,0,0,0,0,0,0,	0,0,2,2,2,0,0,0,0,0,0,2,0,0,2,0,2,0,0,2,0,0,2,2,0,0,0,0,0,0,0,0,0,	0,0,0,2,0,0,0,0,0,0,0,0,2,2,0,0,0,2,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,	0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,	0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,0,1,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,	0,0,0,0,0,0,0,0,1,1,0,1,0,0,1,0,1,0,0,1,0,0,1,1,1,0,0,0,0,0,0,0,0,	0,0,0,0,0,0,0,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,	0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,	1,1,0,0,0,1,1,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,	0,1,1,0,1,1,0,0,0,0,0,1,0,0,1,0,1,0,0,1,0,0,1,1,1,0,0,0,0,0,0,0,0,	0,0,1,1,1,0,0,0,0,0,0,1,0,0,1,0,1,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,	0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,	};	private static final byte rbmap[] = {(byte)255,(byte)136,(byte)0}; // All three components are the same	public NewMItem(String tit, boolean disab, Desktop back)	{		NewMItemCommon(tit,disab,'\n',back);	}		public NewMItem(String tit, boolean disab, char Key, Desktop back)	{		NewMItemCommon(tit,disab,Key,back);	}		private void NewMItemCommon(String tit, boolean disab, char Key, Desktop back)	{		Title = new MenuString(tit, back);		Disabled = disab;		Highlighted = false;		KeybEquiv = Key;		AttachedMenu = null;		if (theDesktop == null)		{			IndexColorModel model = new IndexColorModel(2,3,rbmap,rbmap,rbmap,3);			theDesktop = back;  	 		characters = theDesktop.theApplet.createImage(new MemoryImageSource (33, 18, model, pixels, 0, 33)); 	  		tempChar = theDesktop.theApplet.createImage(11, 9);			tempCharGC = tempChar.getGraphics(); 		}	}	public void MIDraw(int x, int y, int width, Graphics g, boolean MenuDisabled, int Width2)	{		MenuString 	a;		boolean		ReallyDisabled;		Character	theCharacter;			ReallyDisabled = Disabled;		if (MenuDisabled)		{			ReallyDisabled = true;		}		if (Title.text.equals("-"))		{			if (ReallyDisabled) g.setColor(new Color(136,136,136));			else g.setColor(Color.black);			g.drawLine(x+1,y-3,x+width-2,y-3);			g.setColor(Color.black);		}		else		{			if (Checked)			{				if (ReallyDisabled) tempCharGC.drawImage(characters,0,-9,null);				else tempCharGC.drawImage(characters,0,0,null);				g.drawImage(tempChar,x+4,y-9,null);			}						Title.Draw(x+17,y,g,ReallyDisabled);						if (KeybEquiv != '\n')			{				if (ReallyDisabled)				{					tempCharGC.drawImage(characters,-11,-9,null);					g.setColor(Color.gray);				}				else				{					tempCharGC.drawImage(characters,-11,0,null);					g.setColor(Color.black);				}				g.drawImage(tempChar,x+width-Width2,y-9,null);				theCharacter = new Character(KeybEquiv);				g.drawString(theCharacter.toString(),x+width-Width2+11,y);				g.setColor(Color.black);			}			if (AttachedMenu != null)			{				if (ReallyDisabled) tempCharGC.drawImage(characters,-22,-9,null);				else tempCharGC.drawImage(characters,-22,0,null);				g.drawImage(tempChar,x+width-13,y-9,null);			}		}	}		public void CheckItem(boolean state)	{		this.Checked = state;	}		public void EnableItem()	{		this.Disabled = false;	}		public void DisableItem()	{		this.Disabled = true;	}	public boolean Highlighted()	{		return this.Highlighted;	}}	